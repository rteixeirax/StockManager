// <auto-generated />
using System;

using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

using StockManager.Src.Data;

namespace StockManager.Src.Data.Migrations
{
    [DbContext(typeof(DatabaseContext))]
    partial class DatabaseContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "3.1.6");

            modelBuilder.Entity("StockManager.Src.Data.Entities.AppSettings", b => {
                b.Property<int>("AppSettingsId")
                    .ValueGeneratedOnAdd()
                    .HasColumnType("INTEGER");

                b.Property<DateTime?>("CreatedAt")
                    .HasColumnType("TEXT");

                b.Property<float>("DefaultGlobalMinStock")
                    .ValueGeneratedOnAdd()
                    .HasColumnType("REAL")
                    .HasDefaultValue(0f);

                b.Property<string>("DocumentsFolder")
                    .HasColumnType("TEXT");

                b.Property<string>("Language")
                    .HasColumnType("TEXT");

                b.Property<DateTime?>("UpdatedAt")
                    .HasColumnType("TEXT");

                b.HasKey("AppSettingsId");

                b.ToTable("AppSettings");

                b.HasData(
                    new
                    {
                        AppSettingsId = 1,
                        CreatedAt = new DateTime(2020, 10, 19, 20, 28, 19, 859, DateTimeKind.Utc).AddTicks(5635),
                        DefaultGlobalMinStock = 0f,
                        DocumentsFolder = "desktop",
                        Language = "pt-PT",
                        UpdatedAt = new DateTime(2020, 10, 19, 20, 28, 19, 859, DateTimeKind.Utc).AddTicks(5635)
                    });
            });

            modelBuilder.Entity("StockManager.Src.Data.Entities.Location", b => {
                b.Property<int>("LocationId")
                    .ValueGeneratedOnAdd()
                    .HasColumnType("INTEGER");

                b.Property<DateTime?>("CreatedAt")
                    .HasColumnType("TEXT");

                b.Property<bool>("IsMain")
                    .ValueGeneratedOnAdd()
                    .HasColumnType("INTEGER")
                    .HasDefaultValue(false);

                b.Property<string>("Name")
                    .IsRequired()
                    .HasColumnType("TEXT");

                b.Property<DateTime?>("UpdatedAt")
                    .HasColumnType("TEXT");

                b.HasKey("LocationId");

                b.HasIndex("IsMain")
                    .HasName("IsMainIndex");

                b.HasIndex("Name")
                    .IsUnique()
                    .HasName("UniqueName");

                b.ToTable("Locations");

                b.HasData(
                    new
                    {
                        LocationId = 1,
                        CreatedAt = new DateTime(2020, 10, 19, 20, 28, 19, 895, DateTimeKind.Utc).AddTicks(5301),
                        IsMain = true,
                        Name = "Warehouse",
                        UpdatedAt = new DateTime(2020, 10, 19, 20, 28, 19, 895, DateTimeKind.Utc).AddTicks(5301)
                    },
                    new
                    {
                        LocationId = 2,
                        CreatedAt = new DateTime(2020, 10, 19, 20, 28, 19, 895, DateTimeKind.Utc).AddTicks(5301),
                        IsMain = false,
                        Name = "Vehicle #1",
                        UpdatedAt = new DateTime(2020, 10, 19, 20, 28, 19, 895, DateTimeKind.Utc).AddTicks(5301)
                    });
            });

            modelBuilder.Entity("StockManager.Src.Data.Entities.Notification", b => {
                b.Property<int>("NotificationId")
                    .ValueGeneratedOnAdd()
                    .HasColumnType("INTEGER");

                b.Property<DateTime?>("CreatedAt")
                    .HasColumnType("TEXT");

                b.Property<int>("ProductLocationId")
                    .HasColumnType("INTEGER");

                b.Property<DateTime?>("UpdatedAt")
                    .HasColumnType("TEXT");

                b.HasKey("NotificationId");

                b.HasIndex("ProductLocationId");

                b.ToTable("Notifications");
            });

            modelBuilder.Entity("StockManager.Src.Data.Entities.Product", b => {
                b.Property<int>("ProductId")
                    .ValueGeneratedOnAdd()
                    .HasColumnType("INTEGER");

                b.Property<DateTime?>("CreatedAt")
                    .HasColumnType("TEXT");

                b.Property<string>("Name")
                    .IsRequired()
                    .HasColumnType("TEXT");

                b.Property<string>("Reference")
                    .IsRequired()
                    .HasColumnType("TEXT");

                b.Property<DateTime?>("UpdatedAt")
                    .HasColumnType("TEXT");

                b.HasKey("ProductId");

                b.HasIndex("Reference")
                    .IsUnique()
                    .HasName("UniqueReference");

                b.ToTable("Products");
            });

            modelBuilder.Entity("StockManager.Src.Data.Entities.ProductLocation", b => {
                b.Property<int>("ProductLocationId")
                    .ValueGeneratedOnAdd()
                    .HasColumnType("INTEGER");

                b.Property<DateTime?>("CreatedAt")
                    .HasColumnType("TEXT");

                b.Property<int>("LocationId")
                    .HasColumnType("INTEGER");

                b.Property<float>("MinStock")
                    .ValueGeneratedOnAdd()
                    .HasColumnType("REAL")
                    .HasDefaultValue(0f);

                b.Property<int>("ProductId")
                    .HasColumnType("INTEGER");

                b.Property<float>("Stock")
                    .ValueGeneratedOnAdd()
                    .HasColumnType("REAL")
                    .HasDefaultValue(0f);

                b.Property<DateTime?>("UpdatedAt")
                    .HasColumnType("TEXT");

                b.HasKey("ProductLocationId");

                b.HasIndex("LocationId");

                b.HasIndex("ProductId", "LocationId")
                    .IsUnique()
                    .HasName("UniqueProductIdLocationIdPair");

                b.ToTable("ProductLocations");
            });

            modelBuilder.Entity("StockManager.Src.Data.Entities.Role", b => {
                b.Property<int>("RoleId")
                    .ValueGeneratedOnAdd()
                    .HasColumnType("INTEGER");

                b.Property<string>("Code")
                    .IsRequired()
                    .HasColumnType("TEXT");

                b.Property<DateTime?>("CreatedAt")
                    .HasColumnType("TEXT");

                b.Property<DateTime?>("UpdatedAt")
                    .HasColumnType("TEXT");

                b.HasKey("RoleId");

                b.HasIndex("Code")
                    .IsUnique()
                    .HasName("UniqueCode");

                b.ToTable("Roles");

                b.HasData(
                    new
                    {
                        RoleId = 1,
                        Code = "Admin",
                        CreatedAt = new DateTime(2020, 10, 19, 20, 28, 19, 903, DateTimeKind.Utc).AddTicks(5253),
                        UpdatedAt = new DateTime(2020, 10, 19, 20, 28, 19, 903, DateTimeKind.Utc).AddTicks(5253)
                    },
                    new
                    {
                        RoleId = 2,
                        Code = "User",
                        CreatedAt = new DateTime(2020, 10, 19, 20, 28, 19, 903, DateTimeKind.Utc).AddTicks(5253),
                        UpdatedAt = new DateTime(2020, 10, 19, 20, 28, 19, 903, DateTimeKind.Utc).AddTicks(5253)
                    });
            });

            modelBuilder.Entity("StockManager.Src.Data.Entities.StockMovement", b => {
                b.Property<int>("StockMovementId")
                    .ValueGeneratedOnAdd()
                    .HasColumnType("INTEGER");

                b.Property<DateTime?>("CreatedAt")
                    .HasColumnType("TEXT");

                b.Property<int?>("FromLocationId")
                    .HasColumnType("INTEGER");

                b.Property<string>("FromLocationName")
                    .ValueGeneratedOnAdd()
                    .HasColumnType("TEXT")
                    .HasDefaultValue(null);

                b.Property<int>("ProductId")
                    .HasColumnType("INTEGER");

                b.Property<float>("Qty")
                    .HasColumnType("REAL");

                b.Property<float>("Stock")
                    .HasColumnType("REAL");

                b.Property<int?>("ToLocationId")
                    .HasColumnType("INTEGER");

                b.Property<string>("ToLocationName")
                    .ValueGeneratedOnAdd()
                    .HasColumnType("TEXT")
                    .HasDefaultValue(null);

                b.Property<DateTime?>("UpdatedAt")
                    .HasColumnType("TEXT");

                b.Property<int?>("UserId")
                    .HasColumnType("INTEGER");

                b.HasKey("StockMovementId");

                b.HasIndex("FromLocationId");

                b.HasIndex("ProductId");

                b.HasIndex("ToLocationId");

                b.HasIndex("UserId");

                b.ToTable("StockMovements");
            });

            modelBuilder.Entity("StockManager.Src.Data.Entities.User", b => {
                b.Property<int>("UserId")
                    .ValueGeneratedOnAdd()
                    .HasColumnType("INTEGER");

                b.Property<DateTime?>("CreatedAt")
                    .HasColumnType("TEXT");

                b.Property<DateTime?>("LastLogin")
                    .HasColumnType("TEXT");

                b.Property<string>("Password")
                    .IsRequired()
                    .HasColumnType("TEXT");

                b.Property<int>("RoleId")
                    .HasColumnType("INTEGER");

                b.Property<DateTime?>("UpdatedAt")
                    .HasColumnType("TEXT");

                b.Property<string>("Username")
                    .IsRequired()
                    .HasColumnType("TEXT");

                b.HasKey("UserId");

                b.HasIndex("RoleId");

                b.HasIndex("Username")
                    .IsUnique()
                    .HasName("UniqueUsername");

                b.ToTable("Users");

                b.HasData(
                    new
                    {
                        UserId = 1,
                        CreatedAt = new DateTime(2020, 10, 19, 20, 28, 20, 4, DateTimeKind.Utc).AddTicks(4860),
                        Password = "$2b$10$/Xh/UimJiQxbbYJrYPML2Of4S2tJNpUrXNFgXTwgW9Du.w4LRtwIm",
                        RoleId = 1,
                        UpdatedAt = new DateTime(2020, 10, 19, 20, 28, 20, 4, DateTimeKind.Utc).AddTicks(4860),
                        Username = "Admin"
                    });
            });

            modelBuilder.Entity("StockManager.Src.Data.Entities.Notification", b => {
                b.HasOne("StockManager.Src.Data.Entities.ProductLocation", "ProductLocation")
                    .WithMany("Notifications")
                    .HasForeignKey("ProductLocationId")
                    .OnDelete(DeleteBehavior.Cascade)
                    .IsRequired();
            });

            modelBuilder.Entity("StockManager.Src.Data.Entities.ProductLocation", b => {
                b.HasOne("StockManager.Src.Data.Entities.Location", "Location")
                    .WithMany("ProductLocations")
                    .HasForeignKey("LocationId")
                    .OnDelete(DeleteBehavior.Restrict)
                    .IsRequired();

                b.HasOne("StockManager.Src.Data.Entities.Product", "Product")
                    .WithMany("ProductLocations")
                    .HasForeignKey("ProductId")
                    .OnDelete(DeleteBehavior.Cascade)
                    .IsRequired();
            });

            modelBuilder.Entity("StockManager.Src.Data.Entities.StockMovement", b => {
                b.HasOne("StockManager.Src.Data.Entities.Location", "FromLocation")
                    .WithMany("StockMovementsFrom")
                    .HasForeignKey("FromLocationId")
                    .OnDelete(DeleteBehavior.SetNull);

                b.HasOne("StockManager.Src.Data.Entities.Product", "Product")
                    .WithMany("StockMovements")
                    .HasForeignKey("ProductId")
                    .OnDelete(DeleteBehavior.Cascade)
                    .IsRequired();

                b.HasOne("StockManager.Src.Data.Entities.Location", "ToLocation")
                    .WithMany("StockMovementsTo")
                    .HasForeignKey("ToLocationId")
                    .OnDelete(DeleteBehavior.SetNull);

                b.HasOne("StockManager.Src.Data.Entities.User", "User")
                    .WithMany("StockMovements")
                    .HasForeignKey("UserId")
                    .OnDelete(DeleteBehavior.SetNull);
            });

            modelBuilder.Entity("StockManager.Src.Data.Entities.User", b => {
                b.HasOne("StockManager.Src.Data.Entities.Role", "Role")
                    .WithMany("Users")
                    .HasForeignKey("RoleId")
                    .OnDelete(DeleteBehavior.Restrict)
                    .IsRequired();
            });
#pragma warning restore 612, 618
        }
    }
}
